//
//  PrefixHeader.pch
//  iOS-Learning-Demo
//
//  Created by yuan on 2019/2/22.
//  Copyright © 2019 yuan. All rights reserved.
//

#pragma mark - *********** BaseHeader ***********

#import "YSBase.h"

#pragma mark - *********** PodHeader ***********

#import "SDAutoLayout.h"
#import "YYModel.h"
#import "SDAutoLayout.h"
#import "ReactiveObjC.h"
#import "YBImageBrowser.h"

#pragma mark - 屏幕 定义引用

#define SCREEN_WIDTH    [UIScreen mainScreen].bounds.size.width
#define SCREEN_HEIGHT   [UIScreen mainScreen].bounds.size.height

#define CellHeight YSDesignValue(40)

#define iPhone4     SCREEN_HEIGHT == 480
#define iPhone5     SCREEN_HEIGHT == 568
#define iPhone6     SCREEN_HEIGHT == 667
#define iPhone6Plus SCREEN_HEIGHT == 736

#define iPhoneX_XS     (SCREEN_WIDTH == 375.f && SCREEN_HEIGHT == 812.f ? YES : NO)
#define iPhoneXR_XSMax (SCREEN_WIDTH == 414.f && SCREEN_HEIGHT == 896.f ? YES : NO)

//有刘海的情况
#define isFullScreen   (iPhoneX_XS || iPhoneXR_XSMax)

#pragma mark - 常用取值

#define AppKeyWindow [UIApplication sharedApplication].keyWindow

//状态栏高度
#define StatusBarHeight (isFullScreen ? 44 : 20)
//导航栏高度
#define NavBarHeight (44 + StatusBarHeight)
//TabBar高度
#define TabBarHeight (isFullScreen ? 83 : 49)
//顶部安全区域
#define SafeAreaTopHeight (isFullScreen ? 88 : 64)
//底部安全区域
#define SafeAreaBottomHeight (isFullScreen ? 34 : 0)

#pragma mark - *********** Tool ***********

#define SCREEN_WIDTH    [UIScreen mainScreen].bounds.size.width
#define SCREEN_HEIGHT   [UIScreen mainScreen].bounds.size.height

static inline void showAlertWithTitle(NSString *title){
    UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"" message:title delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alertView show];
}

#pragma mark - *********** UIColor ***********

#define UIColorViewBG UIColorFromRGB(0xF6F7F9)
#define UIColor_F8    UIColorFromRGB(0xF8F8F8)
#define UIColor_9B    UIColorFromRGB(0x9B9B9B)

#define UIColorFromRGB(rgbValue)    [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0F blue:((float)(rgbValue & 0xFF))/255.0F alpha:1.0]

#define random(r, g, b, a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)/255.0]
#define UIColorRandom random(arc4random_uniform(256), arc4random_uniform(256), arc4random_uniform(256), arc4random_uniform(256))

#define DEVICE_SYSTEM_VERSION_  [[[UIDevice currentDevice] systemVersion] floatValue]
#define IS_IOS_VERSION_11 ((DEVICE_SYSTEM_VERSION_ >= 11.0)?(YES):(NO))

#pragma mark - *********** Tool ***********

//TODO:创建纯色图片
static inline UIImage * createImageWithColor(UIColor *color,float width,float height){
    CGRect rect = CGRectMake(0.0f,0.0f,width,height);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return theImage;
}

/**
//TODO:点击图片显示大图
 
 @param imageViewArr 图像来源数组
 @param currentIndex 当前下标
 */
static inline void showLargeImage(NSArray <UIImageView *> * imageViewArr,
                                  NSInteger currentIndex){
    NSMutableArray *photos = @[].mutableCopy;
    for (int i = 0 ; i < imageViewArr.count ; i++){
        UIImageView *imgView = imageViewArr[i];
        YBImageBrowseCellData *data = [YBImageBrowseCellData new];
        __block NSData *imgData = UIImagePNGRepresentation(imgView.image);
        data.imageBlock = ^__kindof UIImage * _Nullable{
            return [YBImage imageWithData:imgData];
        };
        data.sourceObject = imgView;
        [photos addObject:data];
    }
    YBImageBrowser *browser = [YBImageBrowser new];
    browser.dataSourceArray = photos;
    browser.currentIndex = currentIndex;
    [browser show];
}

#ifndef weakify
#if DEBUG
#if __has_feature(objc_arc)
#define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;
#else
#define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;
#endif
#else
#if __has_feature(objc_arc)
#define weakify(object) try{} @finally{} {} __weak __typeof__(object) weak##_##object = object;
#else
#define weakify(object) try{} @finally{} {} __block __typeof__(object) block##_##object = object;
#endif
#endif
#endif

#ifndef strongify
#if DEBUG
#if __has_feature(objc_arc)
#define strongify(object) autoreleasepool{} __typeof__(object) object = weak##_##object;
#else
#define strongify(object) autoreleasepool{} __typeof__(object) object = block##_##object;
#endif
#else
#if __has_feature(objc_arc)
#define strongify(object) try{} @finally{} __typeof__(object) object = weak##_##object;
#else
#define strongify(object) try{} @finally{} __typeof__(object) object = block##_##object;
#endif
#endif
#endif
